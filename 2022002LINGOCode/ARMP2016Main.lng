! LINGO solver developed for the problem of elaborating water distribution schedules in periods of scarcity;
! developer: Tatiana Balbi Fraga;


MODEL:
! Problem of Elaborating Water Distribution Schedules in Periods of Scarcity;

SETS:

DAYS;
SHIFTS;
LOCALS: 	IDEAL_INFLOW_RATE, 
	MAX_INFLOW_RATE, 
	MIN_INFLOW_RATE, 
	IDEAL_INFLOW, 
	INITIAL_VOLUME, 
	CAPACITY, 
	RELEVANCE_FACTOR;

DAILY_SHIFTS (DAYS, SHIFTS);

SOLUTION (DAYS, SHIFTS, LOCALS): 	VALVE_STATUS, 
				INFLOW, 
				OUTFLOW, 
				RES_VOLUME, 
				IDLE_CAPACITY;

SOLUTION_DAYAND (SOLUTION)| &2 #EQ# N_SHIFTS: IDLE_CAP_EXP_WEIG;

RESERVOIRS(LOCALS) | &1 #LE# N_RESERVOIRS;

ZONES(LOCALS) | &1 #GT# N_RESERVOIRS: 	HOUSEHOLDS, 
				DEMAND, 
				ZONE_AVERAGE_CAPACITY, 
				ZONE_OUTFLOW, 
				DIFF, 
				DEMAND_PER,
				ZONE_OUTFLOW_PER;

DISTRIBUTION(RESERVOIRS, LOCALS): NET;

SOLUTION_RESERVOIRS (DAYS, SHIFTS, RESERVOIRS);

ENDSETS

DATA:

DAYS = @FILE('data.ldt');
SHIFTS = @FILE('data.ldt');
LOCALS = @FILE('data.ldt');
N_RESERVOIRS = @FILE('data.ldt');
HOUSING_COEFF = @FILE('data.ldt');
DAILY_COMSUMPTION = @FILE('data.ldt');
TIME_PER_SHIFT = @FILE('data.ldt');
HOUSEHOLDS = @FILE('data.ldt');
NET = @FILE('data.ldt');
MAX_INFLOW_RATE = @FILE('data.ldt');
ZONE_AVERAGE_CAPACITY = @FILE('data.ldt');
CAPACITY = @FILE('data.ldt');

IRRELEVANCE_FACTOR = 0.000005;
DEM_RELEVANCE_FACTOR = 100000;
VALVES_RELEVANCE_FACTOR = 100;
RELEVANCE_FACTOR = 1.13 1.13 1.12 1.12 1.12 1.12 1.0 1.0 1.0 1.0 1.0 1.0;

ENDDATA

CALC:

N_DAYS = @SIZE(DAYS);
N_SHIFTS = @SIZE(SHIFTS);

N_TOTAL_HOUSEHOLDS = @SUM( ZONES(s): HOUSEHOLDS(s) );

@FOR( ZONES(s): DEMAND(s) = HOUSEHOLDS(s) * HOUSING_COEFF * DAILY_COMSUMPTION * N_DAYS );

TOTAL_DEMAND = @SUM( ZONES(s): DEMAND(s) );

@FOR( ZONES(s): CAPACITY(s) = HOUSEHOLDS(s) * ZONE_AVERAGE_CAPACITY(s));

@FOR (LOCALS(l): INITIAL_VOLUME(l) = 0);

MAX_INFLOW_RATE_INF = @MAX(LOCALS: MAX_INFLOW_RATE);

@FOR( LOCALS (l):
	@IFC( MAX_INFLOW_RATE (l) #LE# 1.2345678: 
		MAX_INFLOW_RATE (l) = MAX_INFLOW_RATE_INF ) );

@FOR( LOCALS (l):
	@IFC( MIN_INFLOW_RATE (l) #LE# 1.2345678: 
		MIN_INFLOW_RATE(l) = 0.00 ) );

!If there is a minimum flow related to some location, use this formula for this location;
@FOR( LOCALS (l) | l #EQ# 12: MIN_INFLOW_RATE(l) = 5000.00 );

ENDCALC

! The objective;

[OBJECTIVE_eq02] MAX = TOTAL_ZONE_OUTFLOW - DEM_RELEVANCE_FACTOR*@SUM( ZONES(s): DIFF(s) ) - IRRELEVANCE_FACTOR*IDLE_CAP_EXP_WEIGHTED_SUM 
			+ VALVES_RELEVANCE_FACTOR*@SUM( SOLUTION(d,t,l): VALVE_STATUS(d,t,l) );

@FOR ( ZONES(s): [CALC_DIFF]
	DIFF(s) = @ABS( DEMAND_PER(s) - ZONE_OUTFLOW_PER(s)) );

@FOR( ZONES(s): DEMAND_PER(s) = DEMAND(s)/TOTAL_DEMAND);
@FOR( ZONES(s): ZONE_OUTFLOW_PER(s) = ZONE_OUTFLOW(s)/TOTAL_ZONE_OUTFLOW);

!Restrictions;

! reservoirs;

@FOR ( SOLUTION_RESERVOIRS(d,t,r): [VOL_DIST_RESERVAT]
	OUTFLOW(d,t,r) - @SUM( LOCALS(l): INFLOW(d,t,l) * NET(r,l) ) = 0 );

! sectors;

[CALC_VOLUME_TOTAL] TOTAL_ZONE_OUTFLOW - @SUM(ZONES(s): ZONE_OUTFLOW(s) ) = 0;

@FOR ( ZONES(s): [RES_DE_DEMANDA]
	ZONE_OUTFLOW(s) - DEMAND(s) <= 0 );

@FOR( ZONES(s): [VOLUME_DISTRIBUIDO_POR_SETOR]
	ZONE_OUTFLOW(s) - @SUM( DAILY_SHIFTS(d,t): OUTFLOW(d,t,s) ) = 0 );

[CALC_AVER_INFLOW] HOUSEHOLD_AVER_INFLOW - TOTAL_ZONE_OUTFLOW / (N_TOTAL_HOUSEHOLDS * N_DAYS) = 0;
[CALC_INHABIT_AVER_INFLOW] INHABIT_AVER_INFLOW - HOUSEHOLD_AVER_INFLOW / HOUSING_COEFF = 0;

! all locals;

@FOR ( SOLUTION(d,t,l): [VOL_REST_NAO_NULO]
	RES_VOLUME(d,t,l) >= 0 );

@FOR ( SOLUTION(d,t,l): [RES_CAPACIDADE]
	RES_VOLUME(d,t,l) - CAPACITY(l) <= 0);

@FOR( SOLUTION(d,t,l): [INFLOW_PER_SHIFT_Eq03]
	INFLOW(d,t,l) = IDEAL_INFLOW(l) * VALVE_STATUS(d,t,l) );

@FOR ( SOLUTION(d,t,l) | d #EQ# 1 #AND# t #EQ# 1: [CALC_VOL_REST_INI]
	RES_VOLUME(d,t,l) - INITIAL_VOLUME(l) - INFLOW(d,t,l) + OUTFLOW(d,t,l) = 0 );

@FOR ( SOLUTION(d,t,l) | d #NE# 1 #AND# t #EQ# 1: [CALC_VOL_REST_PRIM_TURNO]
	RES_VOLUME(d,t,l) - RES_VOLUME(d-1,N_SHIFTS,l) - INFLOW(d,t,l) + OUTFLOW(d,t,l) = 0 );

@FOR ( SOLUTION(d,t,l) | t #NE# 1: [CALC_VOL_REST_GERAL]
	RES_VOLUME(d,t,l) - RES_VOLUME(d,t-1,l) - INFLOW(d,t,l) + OUTFLOW(d,t,l) = 0 );

@FOR( LOCALS(l): [EVAL_INFLOW]
	IDEAL_INFLOW(l) = IDEAL_INFLOW_RATE(l) * TIME_PER_SHIFT );

@FOR( LOCALS(l): [RES_MAX_INFLOW_RATE_Eq05]
	IDEAL_INFLOW_RATE(l) <= MAX_INFLOW_RATE(l) );

@FOR( LOCALS(l): [RES_MIN_INFLOW_RATE_Eq06]
	IDEAL_INFLOW_RATE(l) >= MIN_INFLOW_RATE(l) );
 
@FOR( SOLUTION(d,t,l): [CALC_CAP_OCIOSA]
	IDLE_CAPACITY(d,t,l) - CAPACITY(l) + RES_VOLUME(d,t,l) = 0);

[CALC_CAP_OCIOSA_POND] IDLE_CAP_EXP_WEIGHTED_SUM - @SUM( SOLUTION_DAYAND(d,t,l): IDLE_CAP_EXP_WEIG(d,t,l) ) = 0;

@FOR( SOLUTION_DAYAND(d,t,l): IDLE_CAP_EXP_WEIG(d,t,l) = IDLE_CAPACITY(d,t,l)^RELEVANCE_FACTOR(l) );

! nature of the variables;

@FOR( SOLUTION: [Eq01]
	@BIN( VALVE_STATUS));

END